// @ts-nocheck
/* eslint-disable */
// --------------------------------------------------
// This file is auto-generated by Tuyau. Do not edit manually !
// --------------------------------------------------

import type { MakeTuyauRequest, MakeTuyauResponse } from '@tuyau/utils/types'
import type { InferInput } from '@vinejs/vine/types'

type RegisterPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/auth/validators/register.ts')['registerValidator']>>
  response: MakeTuyauResponse<import('../app/auth/controllers/auth_controller.ts').default['register'], true>
}
type LoginPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/auth/validators/login.ts')['loginValidator']>>
  response: MakeTuyauResponse<import('../app/auth/controllers/auth_controller.ts').default['login'], true>
}
type MeGet = {
  request: unknown
  response: MakeTuyauResponse<import('../app/auth/controllers/auth_controller.ts').default['me'], false>
}
type LogoutPost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/auth/controllers/auth_controller.ts').default['logout'], false>
}
type AuthEmailVerifyIdPost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/auth/controllers/email_controller.ts').default['verifyEmail'], false>
}
type AuthEmailResendPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/auth/validators/email_verification.ts')['resendVerificationEmailValidator']>>
  response: MakeTuyauResponse<import('../app/auth/controllers/email_controller.ts').default['resendVerificationEmail'], true>
}
type AuthPasswordForgotPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/auth/validators/password_reset.ts')['forgotPasswordValidator']>>
  response: MakeTuyauResponse<import('../app/auth/controllers/password_controller.ts').default['forgotPassword'], true>
}
type AuthPasswordResetIdPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/auth/validators/password_reset.ts')['resetPasswordValidator']>>
  response: MakeTuyauResponse<import('../app/auth/controllers/password_controller.ts').default['resetPassword'], true>
}
export interface ApiDefinition {
  'register': {
    '$url': {
    };
    '$post': RegisterPost;
  };
  'login': {
    '$url': {
    };
    '$post': LoginPost;
  };
  'me': {
    '$url': {
    };
    '$get': MeGet;
  };
  'logout': {
    '$url': {
    };
    '$post': LogoutPost;
  };
  'auth': {
    'email': {
      'verify': {
        ':token': {
          '$url': {
          };
          '$post': AuthEmailVerifyIdPost;
        };
      };
      'resend': {
        '$url': {
        };
        '$post': AuthEmailResendPost;
      };
    };
    'password': {
      'forgot': {
        '$url': {
        };
        '$post': AuthPasswordForgotPost;
      };
      'reset': {
        ':token': {
          '$url': {
          };
          '$post': AuthPasswordResetIdPost;
        };
      };
    };
  };
}
const routes = [
  {
    params: [],
    name: 'auth.register',
    path: '/register',
    method: ["POST"],
    types: {} as RegisterPost,
  },
  {
    params: [],
    name: 'auth.login',
    path: '/login',
    method: ["POST"],
    types: {} as LoginPost,
  },
  {
    params: [],
    name: 'auth.me',
    path: '/me',
    method: ["GET"],
    types: {} as MeGet,
  },
  {
    params: [],
    name: 'auth.logout',
    path: '/logout',
    method: ["POST"],
    types: {} as LogoutPost,
  },
  {
    params: ["token"],
    name: 'auth.email.verify',
    path: '/auth/email/verify/:token',
    method: ["POST"],
    types: {} as AuthEmailVerifyIdPost,
  },
  {
    params: [],
    name: 'auth.email.resend',
    path: '/auth/email/resend',
    method: ["POST"],
    types: {} as AuthEmailResendPost,
  },
  {
    params: [],
    name: 'auth.password.forgot',
    path: '/auth/password/forgot',
    method: ["POST"],
    types: {} as AuthPasswordForgotPost,
  },
  {
    params: ["token"],
    name: 'auth.password.reset',
    path: '/auth/password/reset/:token',
    method: ["POST"],
    types: {} as AuthPasswordResetIdPost,
  },
] as const;
export const api = {
  routes,
  definition: {} as ApiDefinition
}
